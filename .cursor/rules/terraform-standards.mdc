---
description:
globs:
alwaysApply: false
---
# Terraform Development Standards

## Code Organization

### Directory Structure
- Use consistent directory structure:
  ```
  .
  ├── environments/
  │   ├── dev/
  │   │   ├── main.tf
  │   │   ├── variables.tf
  │   │   ├── outputs.tf
  │   │   └── terraform.tfvars
  │   ├── staging/
  │   │   ├── main.tf
  │   │   ├── variables.tf
  │   │   ├── outputs.tf
  │   │   └── terraform.tfvars
  │   └── prod/
  │       ├── main.tf
  │       ├── variables.tf
  │       ├── outputs.tf
  │       └── terraform.tfvars
  ├── modules/
  │   └── [module-name]/
  │       ├── main.tf
  │       ├── variables.tf
  │       ├── outputs.tf
  │       ├── versions.tf
  │       ├── README.md
  │       └── examples/
  │           └── basic/
  │               ├── main.tf
  │               ├── variables.tf
  │               └── outputs.tf
  ├── scripts/
  │   ├── init.sh
  │   ├── plan.sh
  │   ├── apply.sh
  │   └── destroy.sh
  ├── .gitignore
  ├── .pre-commit-config.yaml
  ├── .tflint.hcl
  ├── versions.tf
  └── README.md
  ```

### File Naming
- Use lowercase with hyphens for file names
- Use descriptive names that reflect the resource type
- Follow pattern: `[resource-type]-[purpose].tf`
- Examples:
  - `main.tf`: Primary configuration
  - `variables.tf`: Input variables
  - `outputs.tf`: Output values
  - `versions.tf`: Version constraints
  - `backend.tf`: Backend configuration
  - `providers.tf`: Provider configuration
  - `data.tf`: Data sources
  - `locals.tf`: Local values

### Module Structure
- Each module must have:
  - `main.tf`: Primary resource definitions
  - `variables.tf`: Input variables
  - `outputs.tf`: Output values
  - `README.md`: Documentation
  - `versions.tf`: Version constraints
  - `examples/`: Usage examples
  - `tests/`: Test configurations

## Code Style

### Formatting
- Use 2 spaces for indentation
- Maximum line length: 100 characters
- Use consistent spacing around operators
- Align `=` signs in variable blocks
- Use consistent quote style (prefer double quotes)
- Use consistent block formatting:
  ```hcl
  resource "aws_instance" "example" {
    ami           = "ami-123456"
    instance_type = "t2.micro"

    tags = {
      Name = "example-instance"
    }
  }
  ```

### Naming Conventions
- Use lowercase with hyphens for resource names
- Use consistent naming patterns:
  - Resources: `[environment]-[resource-type]-[purpose]`
  - Variables: `[resource_type]_[purpose]`
  - Outputs: `[resource_type]_[purpose]`
- Examples:
  - Resource: `prod-ec2-web-server`
  - Variable: `instance_type`
  - Output: `instance_private_ip`

### Comments
- Use `#` for single-line comments
- Use `/* */` for multi-line comments
- Document all variables and outputs
- Include purpose and usage examples
- Document complex logic or business rules
- Use consistent comment style:
  ```hcl
  # This is a single-line comment

  /*
   * This is a multi-line comment
   * explaining complex logic
   */
  ```

## Best Practices

### Resource Management
- Use data sources for existing resources
- Implement proper resource dependencies
- Use count/for_each for multiple resources
- Implement proper resource lifecycle rules
- Use proper resource naming
- Implement proper resource tagging
- Use proper resource validation
- Implement proper resource error handling

### State Management
- Use remote state storage
- Implement state locking
- Use workspaces for environment separation
- Implement proper state file backup
- Use proper state file encryption
- Implement proper state file versioning
- Use proper state file access control
- Implement proper state file monitoring

### Variable Management
- Use consistent variable types
- Implement proper variable validation
- Use sensitive = true for sensitive variables
- Provide default values where appropriate
- Use proper variable descriptions
- Implement proper variable constraints
- Use proper variable naming
- Implement proper variable documentation

### Output Management
- Output only necessary information
- Use consistent output naming
- Document all outputs
- Use proper output descriptions
- Implement proper output validation
- Use proper output formatting
- Implement proper output security
- Use proper output documentation

## Version Control

### Git Standards
- Use feature branches
- Implement proper commit messages
- Use pull requests for changes
- Implement code review process
- Use proper branch naming
- Implement proper branch protection
- Use proper commit signing
- Implement proper commit verification

### Tagging
- Use semantic versioning
- Tag releases properly
- Document version changes
- Maintain changelog
- Use proper tag naming
- Implement proper tag signing
- Use proper tag verification
- Implement proper tag documentation

## Documentation

### README Requirements
- Project overview
- Prerequisites
- Installation instructions
- Usage examples
- Input/Output documentation
- Contributing guidelines
- License information
- Security considerations

### Code Documentation
- Document all variables
- Document all outputs
- Include usage examples
- Document complex logic
- Use proper documentation format
- Implement proper documentation validation
- Use proper documentation versioning
- Implement proper documentation review

## Testing

### Unit Testing
- Test all modules
- Test all variables
- Test all outputs
- Implement proper test coverage
- Use proper test naming
- Implement proper test documentation
- Use proper test validation
- Implement proper test reporting

### Integration Testing
- Test module integration
- Test environment integration
- Test provider integration
- Test state management
- Use proper test environment
- Implement proper test data
- Use proper test tools
- Implement proper test automation

## Security

### Access Control
- Implement least privilege
- Use proper IAM roles
- Implement proper resource policies
- Use proper security groups
- Implement proper access logging
- Use proper access monitoring
- Implement proper access auditing
- Use proper access documentation

### Secrets Management
- Use proper secret management
- Implement proper encryption
- Use proper key management
- Implement proper access controls
- Use proper secret rotation
- Implement proper secret versioning
- Use proper secret backup
- Implement proper secret recovery

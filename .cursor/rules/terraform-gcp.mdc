---
description:
globs:
alwaysApply: false
---
# GCP Terraform Configuration Rules

## Table of Contents
1. [File Organization](#file-organization)
2. [GCP-Specific Naming Conventions](#gcp-specific-naming-conventions)
3. [GCP Security Best Practices](#gcp-security-best-practices)
4. [GCP Networking Best Practices](#gcp-networking-best-practices)
5. [GCP Storage Configuration](#gcp-storage-configuration)
6. [GCP Monitoring and Logging](#gcp-monitoring-and-logging)
7. [GCP Cost Management](#gcp-cost-management)
8. [GCP Backup and Recovery](#gcp-backup-and-recovery)
9. [Best Practices for GCP Resources](#best-practices-for-gcp-resources)

## File Organization

### Project Structure
```
terraform-gcp-project/
├── providers.tf          # GCP Provider and GCP-specific configurations
├── backend.tf           # GCS backend configuration
├── versions.tf          # GCP provider version constraints
├── variables.tf         # Input variables
├── outputs.tf          # Output definitions
├── locals.tf           # Local variables
├── terraform.tfvars    # Variable values
├── data.tf            # GCP data sources
│
# Project and Organization
├── project.tf         # Project configuration
├── folders.tf        # Folder structure
├── organization.tf   # Organization policies
│
# Networking
├── vpc.tf            # VPC configuration
├── subnets.tf        # Subnet configurations
├── firewall.tf       # Firewall rules
├── routes.tf         # Custom routes
├── cloud_nat.tf      # Cloud NAT configuration
├── load_balancer.tf  # Load Balancer setup
│
# Security
├── kms.tf            # Cloud KMS configuration
├── secret_manager.tf # Secret Manager setup
├── service_accounts.tf # Service accounts and IAM
├── iam.tf            # IAM policies and bindings
│
# Compute
├── gce.tf            # Compute Engine instances
├── instance_groups.tf # Managed instance groups
├── gke.tf            # Google Kubernetes Engine
├── cloud_run.tf      # Cloud Run services
├── cloud_functions.tf # Cloud Functions
│
# Storage
├── gcs.tf            # Cloud Storage buckets
├── cloud_sql.tf      # Cloud SQL instances
├── memorystore.tf    # Memorystore (Redis)
├── filestore.tf      # Filestore instances
│
# Data and Analytics
├── bigquery.tf       # BigQuery datasets and tables
├── pubsub.tf         # Pub/Sub topics and subscriptions
├── dataflow.tf       # Dataflow jobs
│
# Monitoring
├── monitoring.tf     # Cloud Monitoring
├── logging.tf        # Cloud Logging
├── alerts.tf         # Alert policies
├── dashboards.tf     # Monitoring dashboards
```

## GCP-Specific Naming Conventions

### 1. Resource Naming Pattern
```hcl
locals {
  # Standard GCP resource prefix
  prefix = "${var.project}-${var.environment}-${var.region}"
  
  # Common GCP labels
  common_labels = {
    project     = var.project
    environment = var.environment
    managed_by  = "terraform"
    owner       = var.team
    cost_center = var.cost_center
  }
}

# Example resource names
resource "google_storage_bucket" "logs" {
  name     = "${local.prefix}-logs"
  location = var.region
  project  = var.project
  # ... configuration
}

resource "google_service_account" "app" {
  account_id   = "${local.prefix}-sa"
  display_name = "Application Service Account"
  project      = var.project
  # ... configuration
}
```

### 2. GCP-Specific Variable Validation

```hcl
# Machine Type Validation
variable "machine_type" {
  type        = string
  description = "GCP machine type"
  
  validation {
    condition     = can(regex("^[ne][1-2]-", var.machine_type))
    error_message = "Machine type must be a valid GCP machine type (e.g., n1-standard-1, e2-medium)."
  }
}

# GCS Bucket Name Validation
variable "bucket_name" {
  type        = string
  description = "GCS bucket name"
  
  validation {
    condition     = can(regex("^[a-z0-9][a-z0-9-_.]*[a-z0-9]$", var.bucket_name))
    error_message = "Bucket name must be valid GCS bucket name (lowercase, numbers, dots, hyphens, underscores)."
  }
}

# Project ID Validation
variable "project_id" {
  type        = string
  description = "GCP project ID"
  
  validation {
    condition     = can(regex("^[a-z][a-z0-9-]{4,28}[a-z0-9]$", var.project_id))
    error_message = "Project ID must be 6-30 characters, lowercase letters, numbers, and hyphens."
  }
}
```

## GCP Security Best Practices

### 1. Cloud KMS Configuration
```hcl
# KMS Key Ring and Key
resource "google_kms_key_ring" "main" {
  name     = "${local.prefix}-keyring"
  location = var.region
  project  = var.project
}

resource "google_kms_crypto_key" "main" {
  name     = "${local.prefix}-key"
  key_ring = google_kms_key_ring.main.id
  
  rotation_period = "7776000s"  # 90 days
  
  version_template {
    algorithm        = "GOOGLE_SYMMETRIC_ENCRYPTION"
    protection_level = "HSM"
  }
  
  labels = local.common_labels
}

# IAM for KMS
resource "google_kms_crypto_key_iam_binding" "main" {
  crypto_key_id = google_kms_crypto_key.main.id
  role          = "roles/cloudkms.cryptoKeyEncrypterDecrypter"
  
  members = [
    "serviceAccount:${google_service_account.app.email}"
  ]
}
```

### 2. Firewall Rules
```hcl
# Firewall Rules with Best Practices
resource "google_compute_firewall" "allow_internal" {
  name    = "${local.prefix}-allow-internal"
  network = google_compute_network.main.name
  project = var.project

  allow {
    protocol = "tcp"
    ports    = ["0-65535"]
  }
  allow {
    protocol = "udp"
    ports    = ["0-65535"]
  }
  allow {
    protocol = "icmp"
  }

  source_ranges = [var.vpc_cidr]
  target_tags   = ["internal"]
  
  log_config {
    metadata = "INCLUDE_ALL_METADATA"
  }
}
```

## GCP Networking Best Practices

### 1. VPC Configuration
```hcl
# VPC with Subnets
resource "google_compute_network" "main" {
  name                    = "${local.prefix}-vpc"
  project                 = var.project
  auto_create_subnetworks = false
  routing_mode           = "GLOBAL"
  
  delete_default_routes_on_create = true
}

# Subnet Configuration
resource "google_compute_subnetwork" "private" {
  name          = "${local.prefix}-private"
  project       = var.project
  network       = google_compute_network.main.id
  region        = var.region
  ip_cidr_range = var.private_subnet_cidr
  
  private_ip_google_access = true
  
  log_config {
    aggregation_interval = "INTERVAL_5_SEC"
    flow_sampling       = 0.5
    metadata           = "INCLUDE_ALL_METADATA"
  }
  
  secondary_ip_range {
    range_name    = "pods"
    ip_cidr_range = var.pods_cidr
  }
  
  secondary_ip_range {
    range_name    = "services"
    ip_cidr_range = var.services_cidr
  }
}
```

## GCP Storage Configuration

### 1. Cloud Storage Configuration
```hcl
# GCS Bucket with Best Practices
resource "google_storage_bucket" "data" {
  name          = "${local.prefix}-data"
  project       = var.project
  location      = var.region
  storage_class = "STANDARD"
  
  uniform_bucket_level_access = true
  versioning {
    enabled = true
  }
  
  encryption {
    default_kms_key_name = google_kms_crypto_key.main.id
  }
  
  lifecycle_rule {
    condition {
      age = 90
    }
    action {
      type = "SetStorageClass"
      storage_class = "NEARLINE"
    }
  }
  
  labels = local.common_labels
}

# Object Lifecycle Policy
resource "google_storage_bucket_object" "sensitive_data" {
  name   = "sensitive/data.txt"
  bucket = google_storage_bucket.data.name
  
  kms_key_name = google_kms_crypto_key.main.id
  
  lifecycle {
    prevent_destroy = true
  }
}
```

## GCP Monitoring and Logging

### 1. Cloud Monitoring Configuration
```hcl
# Monitoring Workspace
resource "google_monitoring_workspace" "main" {
  name         = "${local.prefix}-workspace"
  project      = var.project
  display_name = "Main Monitoring Workspace"
  
  labels = local.common_labels
}

# Alert Policy
resource "google_monitoring_alert_policy" "cpu_high" {
  display_name = "${local.prefix}-cpu-high"
  project      = var.project
  combiner     = "OR"
  
  conditions {
    display_name = "High CPU Usage"
    
    condition_threshold {
      filter          = "metric.type=\"compute.googleapis.com/instance/cpu/utilization\" AND resource.type=\"gce_instance\""
      duration        = "300s"
      comparison      = "COMPARISON_GT"
      threshold_value = 0.8
      
      aggregations {
        alignment_period   = "60s"
        per_series_aligner = "ALIGN_MEAN"
      }
    }
  }
  
  notification_channels = [google_monitoring_notification_channel.email.id]
  
  documentation {
    content   = "CPU utilization is above 80%"
    mime_type = "text/markdown"
  }
}

# Log Sink
resource "google_logging_project_sink" "main" {
  name        = "${local.prefix}-sink"
  project     = var.project
  destination = "storage.googleapis.com/${google_storage_bucket.logs.name}"
  
  filter = "severity >= WARNING"
  
  unique_writer_identity = true
}
```

## GCP Cost Management

### 1. Budget Configuration
```hcl
# Budget Alert
resource "google_billing_budget" "project" {
  billing_account = var.billing_account_id
  display_name    = "${local.prefix}-budget"
  
  budget_filter {
    projects = ["projects/${var.project}"]
    
    custom_period {
      start_date {
        year  = 2024
        month = 1
        day   = 1
      }
    }
  }
  
  amount {
    specified_amount {
      currency_code = "USD"
      units        = var.monthly_budget
    }
  }
  
  threshold_rules {
    threshold_percent = 0.9
    spend_basis      = "CURRENT_SPEND"
  }
  
  all_updates_rule {
    monitoring_notification_channels = [
      google_monitoring_notification_channel.budget.id
    ]
    disable_default_iam_recipients = true
  }
}
```

## GCP Backup and Recovery

### 1. Backup Configuration
```hcl
# Backup Policy for Cloud SQL
resource "google_sql_backup_run" "main" {
  instance = google_sql_database_instance.main.name
  project  = var.project
  
  location = var.region
  
  backup_retention_settings {
    retained_backups = 30
    retention_unit   = "COUNT"
  }
}

# Snapshot Schedule for Persistent Disks
resource "google_compute_resource_policy" "backup" {
  name    = "${local.prefix}-backup-policy"
  project = var.project
  region  = var.region
  
  snapshot_schedule_policy {
    schedule {
      daily_schedule {
        days_in_cycle = 1
        start_time    = "03:00"
      }
    }
    
    retention_policy {
      max_retention_days    = 14
      on_source_disk_delete = "KEEP_AUTO_SNAPSHOTS"
    }
    
    snapshot_properties {
      labels = local.common_labels
      storage_locations = [var.region]
    }
  }
}
```

## Best Practices for GCP Resources

1. **Resource Organization**
   - Use projects for isolation
   - Implement folder structure
   - Follow resource hierarchy
   - Use labels consistently

2. **Security**
   - Use Cloud KMS for encryption
   - Implement least privilege IAM
   - Enable audit logging
   - Use service accounts properly

3. **Networking**
   - Plan IP ranges carefully
   - Use VPC Service Controls
   - Implement proper firewalls
   - Use Cloud NAT where needed

4. **Monitoring**
   - Enable Cloud Monitoring
   - Configure proper logging
   - Set up alerting policies
   - Create custom dashboards

5. **Cost Management**
   - Use appropriate machine types
   - Implement auto-scaling
   - Set up budgets and alerts
   - Monitor resource usage

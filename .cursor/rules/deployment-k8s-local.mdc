# Kubernetes Service Deployment Rule - gRPC & SPA Applications

## Overview
This rule provides templates and guidelines for deploying gRPC services and SPA (TypeScript) applications in the local Kubernetes development environment with automatic HTTPS certificate management via cert-manager and Traefik ingress controller.

## Infrastructure Context
- **Domain**: `local.dev`
- **Ingress Controller**: Traefik v3.5.0
- **Certificate Management**: cert-manager with local CA issuer (`devportal-local-ca-issuer`)
- **Available Namespaces**: `auth`, `monitoring`, `shared`, `registry`, `applications`, `frontend`
- **TLS**: Automatic certificate generation and renewal
- **Resource Management**: Quotas and limits per namespace

## Service Types

### 1. gRPC Service Deployment

#### Complete gRPC Service Template
```yaml
# grpc-service-template.yaml
# Replace {{SERVICE_NAME}}, {{NAMESPACE}}, {{PORT}}, {{IMAGE}} with actual values

apiVersion: v1
kind: Namespace
metadata:
  name: {{NAMESPACE}}
  labels:
    name: {{NAMESPACE}}
    purpose: grpc-services
    environment: local-dev
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: {{NAMESPACE}}-quota
  namespace: {{NAMESPACE}}
spec:
  hard:
    requests.cpu: "2"
    requests.memory: "4Gi"
    limits.cpu: "4"
    limits.memory: "8Gi"
    persistentvolumeclaims: "10"
    services: "20"
    configmaps: "50"
    secrets: "30"
---
apiVersion: v1
kind: LimitRange
metadata:
  name: {{NAMESPACE}}-limits
  namespace: {{NAMESPACE}}
spec:
  limits:
  - default:
      cpu: "500m"
      memory: "1Gi"
    defaultRequest:
      cpu: "100m"
      memory: "256Mi"
    type: Container
---
# Certificate for gRPC service (HTTPS/TLS termination)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{SERVICE_NAME}}-tls
  namespace: {{NAMESPACE}}
  labels:
    app: {{SERVICE_NAME}}
    type: tls-certificate
    service-type: grpc
spec:
  secretName: {{SERVICE_NAME}}-tls
  issuerRef:
    name: devportal-local-ca-issuer
    kind: ClusterIssuer
  dnsNames:
  - {{SERVICE_NAME}}.local.dev
  - "*.local.dev"
  duration: 2160h # 90 days
  renewBefore: 360h # 15 days
  usages:
  - digital signature
  - key encipherment
  - server auth
---
# ConfigMap for gRPC service configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{SERVICE_NAME}}-config
  namespace: {{NAMESPACE}}
  labels:
    app: {{SERVICE_NAME}}
    service-type: grpc
data:
  # gRPC specific configuration
  grpc.port: "{{PORT}}"
  grpc.max_receive_message_size: "4194304"  # 4MB
  grpc.max_send_message_size: "4194304"     # 4MB
  grpc.keepalive_time: "30s"
  grpc.keepalive_timeout: "5s"
  grpc.keepalive_enforcement_min_time: "10s"
  grpc.max_connection_idle: "60s"
  
  # Observability
  metrics.enabled: "true"
  metrics.port: "9090"
  tracing.enabled: "true"
  tracing.jaeger_endpoint: "http://jaeger.monitoring.svc.cluster.local:14268/api/traces"
  
  # NATS integration (if needed)
  nats.url: "nats://nats.shared.svc.cluster.local:4222"
  nats.cluster: "local-cluster"
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: {{SERVICE_NAME}}-secrets
  namespace: {{NAMESPACE}}
  labels:
    app: {{SERVICE_NAME}}
    service-type: grpc
type: Opaque
stringData:
  # Database credentials (if needed)
  db.username: "{{SERVICE_NAME}}_user"
  db.password: "secure_password_here"
  
  # API keys (if needed)
  api.key: "your_api_key_here"
  
  # JWT signing key (if needed)
  jwt.secret: "your_jwt_secret_here"
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{SERVICE_NAME}}
  namespace: {{NAMESPACE}}
  labels:
    app: {{SERVICE_NAME}}
    service-type: grpc
    version: "1.0.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{SERVICE_NAME}}
  template:
    metadata:
      labels:
        app: {{SERVICE_NAME}}
        service-type: grpc
        version: "1.0.0"
      annotations:
        # Prometheus scraping
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: {{SERVICE_NAME}}
        image: {{IMAGE}}
        ports:
        - containerPort: {{PORT}}
          name: grpc
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: GRPC_PORT
          valueFrom:
            configMapKeyRef:
              name: {{SERVICE_NAME}}-config
              key: grpc.port
        - name: METRICS_PORT
          valueFrom:
            configMapKeyRef:
              name: {{SERVICE_NAME}}-config
              key: metrics.port
        - name: JAEGER_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: {{SERVICE_NAME}}-config
              key: tracing.jaeger_endpoint
        - name: NATS_URL
          valueFrom:
            configMapKeyRef:
              name: {{SERVICE_NAME}}-config
              key: nats.url
        # Secrets
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{SERVICE_NAME}}-secrets
              key: db.username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{SERVICE_NAME}}-secrets
              key: db.password
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:{{PORT}}"]
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:{{PORT}}"]
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        # Volume mounts for temporary files
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-run
          mountPath: /var/run
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-run
        emptyDir: {}
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: {{SERVICE_NAME}}
  namespace: {{NAMESPACE}}
  labels:
    app: {{SERVICE_NAME}}
    service-type: grpc
  annotations:
    # Service mesh annotations (if using Istio)
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: grpc
spec:
  type: ClusterIP
  ports:
  - port: {{PORT}}
    targetPort: {{PORT}}
    protocol: TCP
    name: grpc
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: {{SERVICE_NAME}}
---
# Ingress for gRPC-Web (HTTP/2 over HTTPS)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{SERVICE_NAME}}-ingress
  namespace: {{NAMESPACE}}
  labels:
    app: {{SERVICE_NAME}}
    service-type: grpc
  annotations:
    # Cert-manager
    cert-manager.io/cluster-issuer: "local-ca-issuer"
    
    # Traefik specific annotations for gRPC
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.protocol: "h2c"  # HTTP/2 cleartext for gRPC
    
    # gRPC-Web support
    traefik.ingress.kubernetes.io/router.middlewares: "{{NAMESPACE}}-grpc-web@kubernetescrd"
    
    # Optional: Rate limiting
    # traefik.ingress.kubernetes.io/router.middlewares: "{{NAMESPACE}}-rate-limit@kubernetescrd"
spec:
  ingressClassName: traefik
  tls:
  - hosts:
    - {{SERVICE_NAME}}.local.dev
    secretName: {{SERVICE_NAME}}-tls
  rules:
  - host: {{SERVICE_NAME}}.local.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{SERVICE_NAME}}
            port:
              number: {{PORT}}
---
# Traefik Middleware for gRPC-Web
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: grpc-web
  namespace: {{NAMESPACE}}
spec:
  headers:
    customRequestHeaders:
      X-Forwarded-Proto: "https"
    customResponseHeaders:
      Access-Control-Allow-Origin: "*"
      Access-Control-Allow-Methods: "GET,POST,OPTIONS"
      Access-Control-Allow-Headers: "Content-Type,X-Grpc-Web,X-User-Agent"
---
# ServiceMonitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{SERVICE_NAME}}
  namespace: {{NAMESPACE}}
  labels:
    app: {{SERVICE_NAME}}
    service-type: grpc
spec:
  selector:
    matchLabels:
      app: {{SERVICE_NAME}}
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
```

### 2. SPA (TypeScript) Application Deployment

#### Complete SPA Template
```yaml
# spa-app-template.yaml
# Replace {{APP_NAME}}, {{NAMESPACE}}, {{IMAGE}} with actual values

apiVersion: v1
kind: Namespace
metadata:
  name: {{NAMESPACE}}
  labels:
    name: {{NAMESPACE}}
    purpose: frontend-apps
    environment: local-dev
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: {{NAMESPACE}}-quota
  namespace: {{NAMESPACE}}
spec:
  hard:
    requests.cpu: "1"
    requests.memory: "2Gi"
    limits.cpu: "2"
    limits.memory: "4Gi"
    persistentvolumeclaims: "5"
    services: "15"
    configmaps: "30"
    secrets: "20"
---
apiVersion: v1
kind: LimitRange
metadata:
  name: {{NAMESPACE}}-limits
  namespace: {{NAMESPACE}}
spec:
  limits:
  - default:
      cpu: "200m"
      memory: "512Mi"
    defaultRequest:
      cpu: "50m"
      memory: "128Mi"
    type: Container
---
# Certificate for SPA
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{APP_NAME}}-tls
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}
    type: tls-certificate
    app-type: spa
spec:
  secretName: {{APP_NAME}}-tls
  issuerRef:
    name: devportal-local-ca-issuer
    kind: ClusterIssuer
  dnsNames:
  - {{APP_NAME}}.local.dev
  - "*.local.dev"
  duration: 2160h # 90 days
  renewBefore: 360h # 15 days
  usages:
  - digital signature
  - key encipherment
  - server auth
---
# ConfigMap for SPA configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{APP_NAME}}-config
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}
    app-type: spa
data:
  # Nginx configuration for SPA
  nginx.conf: |
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied expired no-cache no-store private must-revalidate auth;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https: wss:;" always;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # SPA routing - serve index.html for all routes
        location / {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # API proxy (if needed)
        location /api/ {
            proxy_pass http://{{APP_NAME}}-api.{{NAMESPACE}}.svc.cluster.local:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
  
  # Environment configuration for the app
  app.env: |
    REACT_APP_API_URL=https://{{APP_NAME}}-api.local.dev
    REACT_APP_GRPC_URL=https://{{APP_NAME}}-grpc.local.dev
    REACT_APP_ENVIRONMENT=local-dev
    REACT_APP_VERSION=1.0.0
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{APP_NAME}}
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}
    app-type: spa
    version: "1.0.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{APP_NAME}}
  template:
    metadata:
      labels:
        app: {{APP_NAME}}
        app-type: spa
        version: "1.0.0"
      annotations:
        # Prometheus scraping for nginx metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: {{APP_NAME}}
        image: {{IMAGE}}  # Should be nginx-based image with built SPA
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 9113
          name: metrics
          protocol: TCP
        env:
        - name: NGINX_ENTRYPOINT_QUIET_LOGS
          value: "1"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 101  # nginx user
          runAsGroup: 101
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
            - SETGID
            - SETUID
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        - name: tmp
          mountPath: /tmp
      # Sidecar for nginx metrics (optional)
      - name: nginx-exporter
        image: nginx/nginx-prometheus-exporter:0.10.0
        args:
        - -nginx.scrape-uri=http://localhost:80/nginx_status
        ports:
        - containerPort: 9113
          name: metrics
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      volumes:
      - name: nginx-config
        configMap:
          name: {{APP_NAME}}-config
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      - name: tmp
        emptyDir: {}
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: {{APP_NAME}}
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}
    app-type: spa
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 9113
    targetPort: 9113
    protocol: TCP
    name: metrics
  selector:
    app: {{APP_NAME}}
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{APP_NAME}}-ingress
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}
    app-type: spa
  annotations:
    # Cert-manager
    cert-manager.io/cluster-issuer: "local-ca-issuer"
    
    # Traefik specific annotations
    traefik.ingress.kubernetes.io/router.tls: "true"
    
    # SPA specific middlewares
    traefik.ingress.kubernetes.io/router.middlewares: "{{NAMESPACE}}-spa-headers@kubernetescrd"
    
    # Optional: Rate limiting
    # traefik.ingress.kubernetes.io/router.middlewares: "{{NAMESPACE}}-rate-limit@kubernetescrd"
spec:
  ingressClassName: traefik
  tls:
  - hosts:
    - {{APP_NAME}}.local.dev
    secretName: {{APP_NAME}}-tls
  rules:
  - host: {{APP_NAME}}.local.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{APP_NAME}}
            port:
              number: 80
---
# Traefik Middleware for SPA
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: spa-headers
  namespace: {{NAMESPACE}}
spec:
  headers:
    customResponseHeaders:
      X-Frame-Options: "SAMEORIGIN"
      X-Content-Type-Options: "nosniff"
      X-XSS-Protection: "1; mode=block"
      Referrer-Policy: "strict-origin-when-cross-origin"
    contentTypeNosniff: true
    frameDeny: true
    browserXssFilter: true
---
# HorizontalPodAutoscaler (optional)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{APP_NAME}}-hpa
  namespace: {{NAMESPACE}}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{APP_NAME}}
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
```

## Deployment Commands

### For gRPC Services:
```bash
# 1. Prepare the template
cp grpc-service-template.yaml my-grpc-service.yaml

# 2. Replace placeholders
sed -i '' 's/{{SERVICE_NAME}}/user-service/g' my-grpc-service.yaml
sed -i '' 's/{{NAMESPACE}}/applications/g' my-grpc-service.yaml
sed -i '' 's/{{PORT}}/50051/g' my-grpc-service.yaml
sed -i '' 's/{{IMAGE}}/my-registry\/user-service:latest/g' my-grpc-service.yaml

# 3. Deploy
kubectl apply -f my-grpc-service.yaml

# 4. Add to /etc/hosts
echo "127.0.0.1 user-service.local.dev" | sudo tee -a /etc/hosts

# 5. Update deployment-urls.yaml
echo "  user_service: https://user-service.local.dev" >> infrastructure/deployment-urls.yaml
```

### For SPA Applications:
```bash
# 1. Prepare the template
cp spa-app-template.yaml my-spa-app.yaml

# 2. Replace placeholders
sed -i '' 's/{{APP_NAME}}/dashboard/g' my-spa-app.yaml
sed -i '' 's/{{NAMESPACE}}/frontend/g' my-spa-app.yaml
sed -i '' 's/{{IMAGE}}/my-registry\/dashboard:latest/g' my-spa-app.yaml

# 3. Deploy
kubectl apply -f my-spa-app.yaml

# 4. Add to /etc/hosts
echo "127.0.0.1 dashboard.local.dev" | sudo tee -a /etc/hosts

# 5. Update deployment-urls.yaml
echo "  dashboard: https://dashboard.local.dev" >> infrastructure/deployment-urls.yaml
```

## Docker Image Requirements

### gRPC Service Dockerfile Example:
```dockerfile
FROM golang:1.21-alpine AS builder
WORKDIR /app
COPY . .
RUN go mod download
RUN CGO_ENABLED=0 GOOS=linux go build -o grpc-service ./cmd/server

# Install grpc_health_probe
RUN GRPC_HEALTH_PROBE_VERSION=v0.4.19 && \
    wget -qO/bin/grpc_health_probe https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/${GRPC_HEALTH_PROBE_VERSION}/grpc_health_probe-linux-amd64 && \
    chmod +x /bin/grpc_health_probe

FROM alpine:latest
RUN apk --no-cache add ca-certificates
WORKDIR /root/
COPY --from=builder /app/grpc-service .
COPY --from=builder /bin/grpc_health_probe /bin/grpc_health_probe
USER 1000:1000
EXPOSE 50051 9090
CMD ["./grpc-service"]
```

### SPA Dockerfile Example:
```dockerfile
# Build stage
FROM node:18-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
RUN npm run build

# Production stage
FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html
USER nginx
EXPOSE 80
```

## Validation Commands

```bash
# Check certificate status
kubectl get certificates -A
kubectl describe certificate <service-name>-tls -n <namespace>

# Check ingress status
kubectl get ingress -A
kubectl describe ingress <service-name>-ingress -n <namespace>

# Check service connectivity
kubectl get svc -A
kubectl get endpoints -A

# Test HTTPS access
curl -k https://<service-name>.local.dev

# Check Traefik dashboard
open https://traefik.local.dev
```

## Troubleshooting

### Certificate Issues:
```bash
# Check cert-manager logs
kubectl logs -n cert-manager deployment/cert-manager

# Check certificate events
kubectl describe certificate <name> -n <namespace>

# Recreate certificate
kubectl delete certificate <name> -n <namespace>
kubectl apply -f <certificate-file>.yaml
```

### Ingress Issues:
```bash
# Check Traefik logs
kubectl logs -n traefik deployment/traefik

# Check ingress class
kubectl get ingressclass

# Verify TLS secret
kubectl get secret <service-name>-tls -n <namespace> -o yaml
```

### Service Connectivity Issues:
```bash
# Test service internally
kubectl exec -it <pod-name> -n <namespace> -- curl http://<service-name>:<port>

# Check service endpoints
kubectl get endpoints -n <namespace>

# Port forward for testing
kubectl port-forward svc/<service-name> <local-port>:<service-port> -n <namespace>
```

## Advanced Configuration

### Rate Limiting Middleware:
```yaml
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: rate-limit
  namespace: {{NAMESPACE}}
spec:
  rateLimit:
    burst: 100
    average: 50
```

### Authentication Middleware:
```yaml
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: basic-auth
  namespace: {{NAMESPACE}}
spec:
  basicAuth:
    secret: auth-secret
```

### CORS Middleware for APIs:
```yaml
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: cors
  namespace: {{NAMESPACE}}
spec:
  headers:
    accessControlAllowMethods:
      - GET
      - OPTIONS
      - PUT
      - POST
      - DELETE
    accessControlAllowOriginList:
      - "https://*.local.dev"
    accessControlMaxAge: 100
    addVaryHeader: true
```

## Integration with Existing Infrastructure

### NATS Integration:
```yaml
# Add to ConfigMap for services that need NATS
nats.url: "nats://nats.shared.svc.cluster.local:4222"
nats.cluster: "local-cluster"
nats.jetstream: "true"
```

### Monitoring Integration:
```yaml
# Add to deployment annotations for Prometheus scraping
prometheus.io/scrape: "true"
prometheus.io/port: "9090"
prometheus.io/path: "/metrics"
```

### Tracing Integration:
```yaml
# Add to ConfigMap for Jaeger tracing
tracing.enabled: "true"
tracing.jaeger_endpoint: "http://jaeger.monitoring.svc.cluster.local:14268/api/traces"
```

This rule provides production-ready templates for deploying both gRPC services and SPA applications with complete integration into your existing local Kubernetes infrastructure, including automatic HTTPS certificates, proper security configurations, and observability features.